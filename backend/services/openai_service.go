package services

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
)

var (
    ErrOpenAIUnavailable = errors.New("unable to reach OpenAI API")
    ErrOpenAIResponse    = errors.New("invalid response from OpenAI API")
    openAIAPIURL         = "https://api.openai.com/v1/chat/completions"
)

var toneConfig = map[string]struct {
    Role    string
    Content string
}{
    "nice": {
        Role:    "system",
        Content: "You are a funny, friendly weather narrator. Response should be 15 words or less.",
    },
    "normal": {
        Role:    "system",
        Content: "You are a factual weather narrator. Response should be 15 words or less.",
    },
    "snarky": {
        Role:    "system",
        Content: "You are a rude weather narrator. Include swearing and insults, but avoid race or gender slurs.  Response should be 15 words or less.",
    },
}

type OpenAIResponse struct {
    Choices []struct {
        Message struct {
            Content string `json:"content"`
        } `json:"message"`
    } `json:"choices"`
}

func GetOpenAIResponse(weatherData, tone string) (string, error) {
    apiKey := os.Getenv("OPENAI_API_KEY")
    if apiKey == "" {
        return "", errors.New("OpenAI API key is not set")
    }

    toneSettings, exists := toneConfig[tone]
    if !exists {
        return "", fmt.Errorf("invalid tone: %s", tone)
    }

    messages := []struct {
        Role    string `json:"role"`
        Content string `json:"content"`
    }{
        {
            Role:    toneSettings.Role,
            Content: toneSettings.Content,
        },
        {
            Role:    "user",
            Content: fmt.Sprintf("Provide a response for this weather: %s", weatherData),
        },
    }

    payload := struct {
        Model    string `json:"model"`
        Messages []struct {
            Role    string `json:"role"`
            Content string `json:"content"`
        } `json:"messages"`
    }{
        Model:    "gpt-4",
        Messages: messages,
    }

    body, err := json.Marshal(payload)
    if err != nil {
        return "", err
    }

    req, err := http.NewRequest("POST", openAIAPIURL, bytes.NewBuffer(body))
    if err != nil {
        return "", ErrOpenAIUnavailable
    }
    req.Header.Set("Authorization", "Bearer "+apiKey)
    req.Header.Set("Content-Type", "application/json")

    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return "", ErrOpenAIUnavailable
    }
    defer resp.Body.Close()

    if resp.StatusCode != http.StatusOK {
        return "", fmt.Errorf("unexpected OpenAI response status: %d", resp.StatusCode)
    }

    responseBody, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return "", err
    }

    var openAIResponse OpenAIResponse
    err = json.Unmarshal(responseBody, &openAIResponse)
    if err != nil {
        return "", ErrOpenAIResponse
    }

    if len(openAIResponse.Choices) == 0 {
        return "", errors.New("no response generated by OpenAI")
    }

    return openAIResponse.Choices[0].Message.Content, nil
}
